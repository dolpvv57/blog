const e=JSON.parse(`{"key":"v-4e05a6be","path":"/projects/webserver.html","title":"Web服务器学习笔记","lang":"zh-CN","frontmatter":{"title":"Web服务器学习笔记","date":"2023-12-07T00:00:00.000Z","description":"线程同步机制 - lock 运用RAII（Resource Acquisition is Initialization，资源获取即初始化）的思想，将资源或者状态与对象的生命周期绑定，通过C++的语言机制，实现资源和状态的安全管理。具体而言就是：在构造函数中申请分配资源，在析构函数中释放资源 多线程同步：添加锁机制，确保任一时刻只有一个线程可以访问关键代码 信号量 信号量控制多个进程或线程对共享资源的访问，可以用作锁或条件变量","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/projects/webserver.html"}],["meta",{"property":"og:site_name","content":"Becky's"}],["meta",{"property":"og:title","content":"Web服务器学习笔记"}],["meta",{"property":"og:description","content":"线程同步机制 - lock 运用RAII（Resource Acquisition is Initialization，资源获取即初始化）的思想，将资源或者状态与对象的生命周期绑定，通过C++的语言机制，实现资源和状态的安全管理。具体而言就是：在构造函数中申请分配资源，在析构函数中释放资源 多线程同步：添加锁机制，确保任一时刻只有一个线程可以访问关键代码 信号量 信号量控制多个进程或线程对共享资源的访问，可以用作锁或条件变量"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Becky"}],["meta",{"property":"article:published_time","content":"2023-12-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Web服务器学习笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Becky\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"线程同步机制 - lock","slug":"线程同步机制-lock","link":"#线程同步机制-lock","children":[{"level":3,"title":"信号量","slug":"信号量","link":"#信号量","children":[]}]},{"level":2,"title":"线程池 - threadpool","slug":"线程池-threadpool","link":"#线程池-threadpool","children":[{"level":3,"title":"模板","slug":"模板","link":"#模板","children":[]}]},{"level":2,"title":"http连接处理","slug":"http连接处理","link":"#http连接处理","children":[{"level":3,"title":"I/O多路复用技术 - epoll","slug":"i-o多路复用技术-epoll","link":"#i-o多路复用技术-epoll","children":[]},{"level":3,"title":"http处理","slug":"http处理","link":"#http处理","children":[]}]},{"level":2,"title":"SQL连接池","slug":"sql连接池","link":"#sql连接池","children":[{"level":3,"title":"单例模式创建","slug":"单例模式创建","link":"#单例模式创建","children":[]},{"level":3,"title":"连接池功能","slug":"连接池功能","link":"#连接池功能","children":[]},{"level":3,"title":"RAII机制","slug":"raii机制","link":"#raii机制","children":[]}]}],"git":{},"readingTime":{"minutes":17.85,"words":5356},"filePathRelative":"projects/webserver.md","localizedDate":"2023年12月7日","excerpt":"<h2> 线程同步机制 - lock</h2>\\n<p>运用RAII（Resource Acquisition is Initialization，资源获取即初始化）的思想，将资源或者状态与<u>对象的生命周期</u>绑定，通过C++的语言机制，实现资源和状态的安全管理。具体而言就是：<strong>在构造函数中申请分配资源，在析构函数中释放资源</strong></p>\\n<p><mark>多线程同步</mark>：添加锁机制，确保任一时刻只有一个线程可以访问关键代码</p>\\n<h3> 信号量</h3>\\n<p>信号量控制多个进程或线程对共享资源的访问，可以用作<u>锁或条件变量</u></p>\\n","autoDesc":true}`);export{e as data};
