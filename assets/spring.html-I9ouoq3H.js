import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as i,d as n}from"./app-CONuJI3o.js";const s="/blog/assets/study/Spring/6.png",e={},a=n('<h1 id="spring框架理解" tabindex="-1"><a class="header-anchor" href="#spring框架理解" aria-hidden="true">#</a> Spring框架理解</h1><figure><img src="'+s+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li><strong>Core Container</strong></li></ol><p>Spring 的核心容器是其他模块建立的基础，具体介绍：</p><ul><li><span style="color:rgb(230,73,25);">Beans 模块</span>：提供了框架的基础部分，包括控制反转和依赖注入</li><li><span style="color:rgb(230,73,25);">Core 核心模块</span>：封装了 Spring 框架的底层部分，包括资源访问、类型转换及一些常用工具类</li><li><span style="color:rgb(230,73,25);">Context 上下文模块</span>：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。其中，ApplicationContext 接口是上下文模块的焦点</li><li><span style="color:rgb(230,73,25);">SpEL 模块</span>：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等</li></ul><ol start="2"><li><strong>Data Access/Integration</strong></li></ol><p>数据访问／集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍：</p><ul><li><span style="color:rgb(230,73,25);">JDBC 模块</span>：提供了一个 JDBC 的样例模板，使用这些模板能消除传统冗长的 JDBC 编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处</li><li><span style="color:rgb(230,73,25);">ORM 模块</span>：提供与流行的“对象-关系”映射框架无缝集成的 API，包括 JPA、JDO、Hibernate 和 MyBatis 等。而且还可以使用 Spring 事务管理，无需额外控制事务</li><li><span style="color:rgb(230,73,25);">OXM 模块</span>：提供了一个支持 Object /XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。将 Java 对象映射成 XML 数据，或者将XML 数据映射成 Java 对象</li><li><span style="color:rgb(230,73,25);">JMS 模块</span>：指 Java 消息服务，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用 JMS，JMS 用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信</li><li><span style="color:rgb(230,73,25);">Transactions 事务模块</span>：支持编程和声明式事务管理</li></ul><ol start="3"><li><strong>Web</strong></li></ol><p>Spring 的 Web 层包括 Web、Servlet、WebSocket 和 Webflux 组件，具体介绍：</p><ul><li><span style="color:rgb(230,73,25);">Web 模块</span>：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IOC 容器初始化以及 Web 应用上下文</li><li><span style="color:rgb(230,73,25);">Servlet 模块</span>：提供了一个 Spring MVC Web 框架实现。Spring MVC 框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的 JSP 标签，完全无缝与 Spring 其他技术协作</li><li><span style="color:rgb(230,73,25);">WebSocket 模块</span>：提供了简单的接口，用户只要实现响应的接口就可以快速的搭建 WebSocket Server，从而实现双向通讯</li><li><span style="color:rgb(230,73,25);">Webflux 模块</span>： Spring WebFlux 是 Spring Framework 5.x中引入的新的响应式web框架。与Spring MVC不同，它不需要Servlet API，是完全异步且非阻塞的，并且通过Reactor项目实现了Reactive Streams规范。Spring WebFlux 用于创建基于事件循环执行模型的完全异步且非阻塞的应用程序</li></ul><ol start="4"><li>其他模块</li></ol><ul><li><span style="color:rgb(230,73,25);">AOP 模块</span>：提供了面向切面编程实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中，这样各司其职，降低业务逻辑和通用功能的耦合</li><li><span style="color:rgb(230,73,25);">Aspects 模块</span>：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架</li><li><span style="color:rgb(230,73,25);">Instrumentation 模块</span>：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用</li><li><span style="color:rgb(230,73,25);">messaging 模块</span>：Spring 4.0 以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持</li><li><span style="color:rgb(230,73,25);">jcl 模块</span>： Spring 5.x中新增了日志框架集成的模块</li><li><span style="color:rgb(230,73,25);">Test 模块</span>：Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能</li></ul><h2 id="spring设计模式" tabindex="-1"><a class="header-anchor" href="#spring设计模式" aria-hidden="true">#</a> Spring设计模式</h2><p>对 Spring 中运用到的设计模式的理解</p><p>首先，理解 Spring 的 IoC 原理，即控制反转，具体含义是由 Spring 容器负责控制对象的生命周期和对象之间的关系。DI（依赖注入）则指容器在实例化对象的时候把它依赖的类注入给它。</p><p>为什么需要 IoC？因为硬编码会造成对象间的过度耦合，使用 IoC 可以做到有效解耦，使开发者不用关心对象间的依赖关系，从而专注于应用开发。</p><p>当需要创建一个对象的时候，只需要配置好配置文件/注解，不用考虑对象是如何被创建出来的。IoC 容器负责创建对象，将对象连接在一起，配置这些对象，并从创建中处理这些对象的整个生命周期，直到它们被完全销毁。</p><ol><li>工厂模式</li></ol><p>工厂模式是一种创建型设计模式，目的是让创建对象的过程和使用对象的过程分离，在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型</p><p>Spring 应用工厂模式与 IoC 原理息息相关，Spring 容器本质是个工厂，使用工厂模式通过 BeanFactory，ApplicationContext 创建对象</p><ol start="2"><li>代理模式</li></ol><p>Spring AOP 功能通过代理模式实现，分为动态代理和静态代理</p><ol start="3"><li>单例模式</li></ol><p>Spring 中的 Bean 默认是单例，有利于容器对 Bean 的管理</p>',25),p=[a];function o(t,g){return r(),i("div",null,p)}const b=l(e,[["render",o],["__file","spring.html.vue"]]);export{b as default};
