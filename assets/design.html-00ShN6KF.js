import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as e}from"./app-CONuJI3o.js";const p="/blog/assets/pic/1.png",t={},c=e(`<h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><p>单例模式：一个类只有一个实例，并提供一个访问该实例的全局节点。</p><p>运作方式： 如果首先创建了一个对象，后续再创建一个新对象， 单例模式下会获得之前已创建的对象， 而不是一个新对象。</p><p>应用场景：比如日期类、时间类，服务于整个项目，保持一致性。工具类用于提供一些统一的东西。</p><h3 id="饿汉式单例模式" tabindex="-1"><a class="header-anchor" href="#饿汉式单例模式" aria-hidden="true">#</a> 饿汉式单例模式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Danli</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Danli</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单例实例是在类加载时创建的，确保了线程安全，避免了多线程的同步问题（只会类加载一次），创建过程是简单直接。</p><p>缺陷是可能导致类加载过程较慢，如果自始至终都没有使用过这个实例，会造成内存浪费。</p><h3 id="懒汉式单例模式" tabindex="-1"><a class="header-anchor" href="#懒汉式单例模式" aria-hidden="true">#</a> 懒汉式单例模式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Danli</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Danli</span> instance<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Danli</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类加载的时候会初始化静态变量，在懒汉式单例模式下，直接将<code>instance</code>初始化为<code>null</code>，解决了饿汉式中类加载慢、可能内存浪费的问题。</p><p>缺陷是必须考虑线程同步，如果有两个线程同时调用getInstance()方法，可能会创建两个实例，所以加上了<code>synchronized</code>，保证同一时刻只有一个线程访问该方法。【新问题】产生同步开销，每次调用该方法就会上锁，但实际上只要<code>instance</code>实例化一次，就不需要考虑同步了。解决办法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Danli</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Danli</span> instance<span class="token punctuation">;</span>
  <span class="token comment">// 双重检查模式, 防止指令重排序, 但可能会失效</span>
  <span class="token comment">// public volatile static Danli instance; </span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Danli</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Danli</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最完美的单例模式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Danli</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Danli</span> instance<span class="token punctuation">;</span> <span class="token comment">// 不要直接在这初始化, 而是调用方法</span>
	<span class="token comment">// getInstance()保证不是在类加载的过程就初始化实例</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Danli</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">DanliInner</span><span class="token punctuation">.</span>iInstance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token comment">// 私有内部类, 声明静态是为了让上面的静态方法能够调用</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DanliInner</span> <span class="token punctuation">{</span>
    <span class="token comment">// final保证只会被创建一次</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Danli</span> iInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式" aria-hidden="true">#</a> 抽象工厂模式</h2><p><code>Chair</code>、<code>CoffeeTable</code>、<code>Sofa</code> 是产品接口。基于抽象工厂接口创建不同的工厂类，每个工厂类都只能返回特定类别的产品：</p><figure><img src="`+p+'" alt="工厂类的层次结构" tabindex="0" loading="lazy"><figcaption>工厂类的层次结构</figcaption></figure>',18),l=[c];function o(i,u){return s(),a("div",null,l)}const r=n(t,[["render",o],["__file","design.html.vue"]]);export{r as default};
