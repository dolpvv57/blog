const e=JSON.parse(`{"key":"v-250a9ace","path":"/posts/Spring/springmvc.html","title":"Spring MVC","lang":"zh-CN","frontmatter":{"description":"Spring MVC MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。 Spring MVC 下我们一般把后端项目分为 Service 层(处理业务)、Dao 层(数据库操作)、Entity 层(实体类)、Controller 层(控制层，返回数据给前台页面) 工作原理 核心组件包括： DispatcherServlet：核心的中央处理器，负责接收请求、分发，并给予客户端响应 HandlerMapping：处理器映射器，根据 uri 去匹配查找能处理的 Handler，并会将请求涉及到的拦截器和 Handler 一起封装 HandlerAdapter：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler Handler：请求处理器，处理实际请求的处理器 ViewResolver：视图解析器，根据 Handler 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/Spring/springmvc.html"}],["meta",{"property":"og:site_name","content":"Becky's"}],["meta",{"property":"og:title","content":"Spring MVC"}],["meta",{"property":"og:description","content":"Spring MVC MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。 Spring MVC 下我们一般把后端项目分为 Service 层(处理业务)、Dao 层(数据库操作)、Entity 层(实体类)、Controller 层(控制层，返回数据给前台页面) 工作原理 核心组件包括： DispatcherServlet：核心的中央处理器，负责接收请求、分发，并给予客户端响应 HandlerMapping：处理器映射器，根据 uri 去匹配查找能处理的 Handler，并会将请求涉及到的拦截器和 Handler 一起封装 HandlerAdapter：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler Handler：请求处理器，处理实际请求的处理器 ViewResolver：视图解析器，根据 Handler 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Becky"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring MVC\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Becky\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"统一异常处理","slug":"统一异常处理","link":"#统一异常处理","children":[]},{"level":2,"title":"表现层(Controller)","slug":"表现层-controller","link":"#表现层-controller","children":[]},{"level":2,"title":"数据层相关","slug":"数据层相关","link":"#数据层相关","children":[{"level":3,"title":"JDBC","slug":"jdbc","link":"#jdbc","children":[]},{"level":3,"title":"MyBatis","slug":"mybatis","link":"#mybatis","children":[]},{"level":3,"title":"内存数据库 H2","slug":"内存数据库-h2","link":"#内存数据库-h2","children":[]}]}],"git":{},"readingTime":{"minutes":13.83,"words":4149},"filePathRelative":"posts/Spring/springmvc.md","excerpt":"<h1> Spring MVC</h1>\\n<p>MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。</p>\\n<p>Spring MVC 下我们一般把后端项目分为 Service 层(处理业务)、Dao 层(数据库操作)、Entity 层(实体类)、Controller 层(控制层，返回数据给前台页面)</p>\\n<h2> 工作原理</h2>\\n<p>核心组件包括：</p>\\n<ul>\\n<li>DispatcherServlet：核心的中央处理器，负责接收请求、分发，并给予客户端响应</li>\\n<li>HandlerMapping：处理器映射器，根据 uri 去匹配查找能处理的 Handler，并会将请求涉及到的拦截器和 Handler 一起封装</li>\\n<li>HandlerAdapter：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler</li>\\n<li>Handler：请求处理器，处理实际请求的处理器</li>\\n<li>ViewResolver：视图解析器，根据 Handler 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端</li>\\n</ul>","autoDesc":true}`);export{e as data};
