import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as e}from"./app-CONuJI3o.js";const o="/blog/assets/project/20-生产者消费者.jpg",p="/blog/assets/project/21-生产者消费者代码示例.jpg",t={},c=e('<h2 id="线程同步机制-lock" tabindex="-1"><a class="header-anchor" href="#线程同步机制-lock" aria-hidden="true">#</a> 线程同步机制 - lock</h2><p>运用RAII（Resource Acquisition is Initialization，资源获取即初始化）的思想，将资源或者状态与<u>对象的生命周期</u>绑定，通过C++的语言机制，实现资源和状态的安全管理。具体而言就是：<strong>在构造函数中申请分配资源，在析构函数中释放资源</strong></p><p><mark>多线程同步</mark>：添加锁机制，确保任一时刻只有一个线程可以访问关键代码</p><h3 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量" aria-hidden="true">#</a> 信号量</h3><p>信号量控制多个进程或线程对共享资源的访问，可以用作<u>锁或条件变量</u></p><p>信号量的两种原子操作：</p><ol><li>**P操作：**进入共享资源之前，将信号量<code>-1</code>，相减后如果信号量 &lt; 0，则表明资源已被占用，进程需阻塞等待（信号量的相反数即正在阻塞等待的进程数）；相减后如果信号量 &gt;= 0，则表明还有资源可使用，进程可正常继续执行。</li><li>**V操作：**离开共享资源之后，将信号量<code>+1</code>，相加后如果信号量 &lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &gt; 0，则表明当前没有阻塞中的进程</li></ol><h4 id="信号量用作锁" tabindex="-1"><a class="header-anchor" href="#信号量用作锁" aria-hidden="true">#</a> 信号量用作锁</h4><p>将信号初始化为<code>1</code>，代表是<strong>互斥信号量</strong>，保证共享内存在任何时刻只有一个进程在访问：</p><ul><li>线程A 调用<code>sem_wait</code>，将信号量的值减为<code>0</code>。由于只有在值小于0时才会等待，所以线程A从函数返回并继续执行。</li><li>线程A 持有锁（即调用<code>sem_wait</code>之后，<code>sem_post</code>之前），此时线程B 尝试进入临界区，调用<code>sem_wait</code>将信号量减为<code>-1</code>，然后进入等待执行队列。</li></ul><h4 id="信号量用作条件变量" tabindex="-1"><a class="header-anchor" href="#信号量用作条件变量" aria-hidden="true">#</a> 信号量用作条件变量</h4><p>条件变量是实现<mark>多进程同步</mark>的方法，将信号初始化为<code>0</code>，代表是<strong>同步信号量</strong>，用来保证某个进程要在另一个进程完成之后开始。如果有两个进程是相互合作的，比如 A生成数据，B读取数据，正常来说是应该先执行A，再执行B。如果 B比A先执行：</p><ul><li>线程B 调用<code>sem_wait</code>，由于信号量初始值为<code>0</code>，故信号量会变为<code>-1</code>（表示线程A 还没生产数据），于是线程B 就阻塞等待；</li><li>当线程A 生成完数据后，执行了<code>sem_post</code> ，就会使得信号量变为<code>0</code>，于是就会唤醒线程B；</li><li>线程B 被唤醒后，意味着线程A 已经生成了数据，于是线程B 就可以正常读取数据了。</li></ul><blockquote><p>加深理解：生产者-消费者问题</p></blockquote><p>【问题描述】</p><ol><li><p>任何时刻只能有一个线程操作缓冲区，说明操作缓冲区是临界代码，<strong>需要互斥</strong>；</p></li><li><p>缓冲区空时，消费者必须等待生产者生成数据；缓冲区满时，生产者必须等待消费者取出数据，说明生产者和消费者<strong>需要同步</strong>。</p></li></ol><figure><img src="'+o+'" alt="生产者-消费者模型" tabindex="0" loading="lazy"><figcaption>生产者-消费者模型</figcaption></figure><p>此时需要三个信号量，分别是：</p><ul><li>互斥信号量<code>mutex</code>：用于互斥访问缓冲区，初始化值为<code>1</code>；</li><li>资源信号量<code>fullBuffers</code>：用于消费者询问缓冲区是否有数据，有数据则读取数据，初始化值为<code>0</code>（表明缓冲区一开始为空）；</li><li>资源信号量<code>emptyBuffers</code>：用于生产者询问缓冲区是否有空位，有空位则生成数据，初始化值为<code>n</code>（缓冲区大小）；</li></ul><figure><img src="'+p+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="线程池-threadpool" tabindex="-1"><a class="header-anchor" href="#线程池-threadpool" aria-hidden="true">#</a> 线程池 - threadpool</h2><p>什么是<mark>线程池</mark>？</p><ul><li>空间换时间，消耗服务器的硬件资源，以换取运行效率；</li><li>池是一组资源的集合，这组资源在服务器启动之初就被完全创建好并初始化，这称为静态资源；</li><li>当服务器进入正式运行阶段，开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配；</li><li>当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。</li></ul><p>线程池的设计模式为<mark>半同步/半反应堆</mark>，其中反应堆具体为<strong>Proactor</strong>事件处理模式。</p><p>具体的，主线程为**<u>异步线程</u>**，负责监听文件描述符，接收socket新连接。若当前监听的socket发生了读写事件，主线程就将任务插入到请求队列，使用信号量提醒工作线程处理。工作线程从请求队列中取出任务，完成读写数据的处理。</p><h3 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h3><p>线程池类使用模板来实现，因为请求的类型可能不同、涉及多个种类：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">threadpool</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">~</span><span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> <span class="token function">append</span><span class="token punctuation">(</span>T <span class="token operator">*</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> m_thread_number<span class="token punctuation">;</span>          <span class="token comment">//线程池中的线程数</span>
  <span class="token keyword">int</span> m_max_requests<span class="token punctuation">;</span>           <span class="token comment">//请求队列中允许的最大请求数</span>
  pthread_t <span class="token operator">*</span>m_threads<span class="token punctuation">;</span>         <span class="token comment">//描述线程池的数组 其大小为m_thread_number</span>
  std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">&gt;</span> m_workqueue<span class="token punctuation">;</span>   <span class="token comment">//请求队列</span>
  locker m_queuelocker<span class="token punctuation">;</span>         <span class="token comment">//保护请求队列的互斥锁</span>
  sem m_queuestat<span class="token punctuation">;</span>              <span class="token comment">//同步信号量 指示是否有请求需要处理</span>
  connection_pool <span class="token operator">*</span>m_connPool<span class="token punctuation">;</span>  <span class="token comment">//数据库连接池</span>
  <span class="token keyword">int</span> m_actor_model<span class="token punctuation">;</span>            <span class="token comment">//模型切换</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http连接处理" tabindex="-1"><a class="header-anchor" href="#http连接处理" aria-hidden="true">#</a> http连接处理</h2><h3 id="i-o多路复用技术-epoll" tabindex="-1"><a class="header-anchor" href="#i-o多路复用技术-epoll" aria-hidden="true">#</a> I/O多路复用技术 - epoll</h3><p>基本概念：</p><ul><li>流：可以进行I/O操作的对象，如文件、管道、套接字等，用<code>fd</code>表示</li><li>阻塞：等待状态，不占用CPU和系统资源，被动唤醒</li><li>非阻塞：忙轮询，占用CPU和系统资源</li></ul><p><code>epoll</code>使用框架：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>//创建一个指示epoll内核事件表的文件描述符 该描述符将用作其他epoll系统调用的第一个参数 参数size是最大监听的数量
int epfd = epoll_create(100);

//需要监听的事件
epoll_event event;
//设置与事件相关联的文件描述符(event.data.fd) 和需要监听的事件(event.events)

//将监听的fd添加进epoll中
epoll_ctl(epfd, EPOLL_CTL_ADD, listen_fd, &amp;event);
//EPOLL_CTL_MOD 修改
//EPOLL_CTL_DEL 删除

//内核事件表
epoll_event events[MAX_EVENT_NUMBER];

while (true) {
  //等待epfd所监控文件描述符上有事件产生 返回就绪的文件描述符个数 并将有活动的事件储存进events
  int number = epoll_wait(epfd, events, 100, -1);
  for (int i=0; i&lt;number; i++) {
    if (events[i].data.fd == listen_fd) {
      //accept新来的客户端连接 并将其加入epfd
    } else if (events[i].events &amp; EPOLLIN) {
      //对该fd进行读操作
    } else if (events[i].events &amp; EPOLLOUT) {
      //对该fd进行写操作
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内核监听的事件，使用结构体<code>epoll_event</code>来表示，该结构体的定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token punctuation">{</span>
__uint32_t events<span class="token punctuation">;</span>   <span class="token comment">//描述事件类型</span>
epoll_data_t data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>events</code>包括的事件类型有：</p><ul><li><code>EPOLLIN</code>：表示对应的文件描述符有可读事件</li><li><code>EPOLLOUT</code>：有可写事件</li><li><code>EPOLLPRI</code>：有紧急的事件可读</li><li><code>EPOLLERR</code>：表示对应的文件描述符发生错误</li><li><code>EPOLLHUP</code>：文件描述符被挂断</li><li><code>EPOLLONESHOT</code>：只监听一次事件，当监听完这次事件后，如果还需要继续监听这个socket，需要重新将该socket加入epoll队列 <ul><li>使用<code>EPOLLONESHOT</code>应对的场景：一个线程读取某个socket上的数据后开始处理数据，在处理过程中该socket上又有新数据可读，此时另一个线程被唤醒读取，此时出现两个线程处理同一个socket</li><li>我们期望的是==<strong>一个socket连接在任一时刻都只被一个线程处理</strong>==，因此通过<code>epoll_ctl</code>对该文件描述符注册<code>EPOLLONESHOT</code>事件，一个线程处理socket时，其他线程将无法处理，当该线程处理完后，需要通过<code>epoll_ctl</code>重置<code>EPOLLONESHOT</code>事件</li></ul></li></ul><p>监控事件时的函数是<code>epoll_wait()</code>，该函数的定义为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> epfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>events<span class="token punctuation">,</span> <span class="token keyword">int</span> maxevents<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>events</code>：储存有活动的内核事件</li><li><code>maxevents</code>：告之内核events的大小，不能超过创建epoll时设定的<code>size</code></li><li><code>timeout</code>：超时时间 <ul><li><code>-1</code>：阻塞等待，直到有就绪的事件发生才会返回</li><li><code>0</code>：不会等待任何事件的发生，立即检查所有已注册的文件描述符，并返回已经就绪的文件描述符数量。如果没有任何文件描述符就绪，则返回0【非阻塞忙轮询】</li><li><code>&gt;0</code>：指定毫秒返回</li></ul></li><li>返回值：表示有多少文件描述符就绪，时间到时返回<code>0</code>，出错则返回<code>-1</code></li></ul><h4 id="select-poll-epoll" tabindex="-1"><a class="header-anchor" href="#select-poll-epoll" aria-hidden="true">#</a> select/poll/epoll</h4><ul><li><p><strong>关于可监听的文件描述符的数量：</strong></p><ul><li><code>select</code>通过<u>线性表</u>描述文件描述符的集合，上限一般是<code>1024</code>（但可以修改源码，重新编译内核，不推荐）</li><li><code>poll</code>是<u>链表</u>描述，突破了文件描述符上限，最大可以打开文件的数目</li><li><code>epoll</code>通过<u>红黑树</u>描述，最大可以打开文件的数目，可以通过命令<code>ulimit -n number</code>修改，仅对当前终端有效</li></ul></li><li><p><strong>如何将文件描述符从用户态传给内核态？</strong></p><ul><li><code>select</code>和<code>poll</code>通过将所有文件描述符拷贝到内核态，每次调用都需要拷贝</li><li><code>epoll</code>通过<code>epoll_create</code>在【内核态】建立一棵红黑树，通过<code>epoll_ctl</code>将要监听的文件描述符注册到红黑树上</li></ul></li><li><p><strong>内核如何判断就绪的文件描述符？</strong></p><ul><li><p><code>select</code>和<code>poll</code>只返回发生了事件的文件描述符的个数，需要通过<u>遍历文件描述符集合</u>，判断哪个文件描述符上有事件发生；</p></li><li><p><code>epoll</code>返回的是发生了事件的个数和结构体数组，结构体包含<code>socket</code>的信息，因此直接处理返回的数组即可</p><ol><li><p><code>epoll</code>句柄创建，即<code>epoll_create</code>时，内核在epoll文件系统里建了个红黑树用于存储之后<code>epoll_ctl</code>传来的文件描述符，除此之外还会再建立一个<code>list</code>链表，用于存储准备就绪的事件，当<code>epoll_wait</code>调用时，仅仅观察这个链表里有没有数据；</p></li><li><p><code>epoll</code>根据每个文件描述符上面的回调函数(中断函数)判断，只有发生了事件的<code>socket</code>才会主动的去调用callback函数，其他空闲状态<code>socket</code>则不会。若是就绪事件，则插入链表。</p></li></ol></li></ul></li><li><p><strong>关于工作模式：</strong></p><ul><li><code>select</code>和<code>poll</code>都只能工作在相对低效的LT模式下（水平触发模式）</li><li><code>epoll</code>则可以工作在ET高效模式，并且还支持<code>EPOLLONESHOT</code>事件，该事件能进一步减少可读、可写和异常事件被触发的次数</li></ul></li><li><p>关于应用场景：</p><ul><li>如果所有的<code>fd</code>都是活跃连接，使用<code>epoll</code>需要建立文件系统，红黑书和链表对于此来说效率反而不高，不如<code>select</code>（小规模连接数、单线程模型，在不同的平台和操作系统上都有良好的支持 - 跨平台运行）</li><li>当监测的<code>fd</code>数目较小，且各个<code>fd</code>都比较活跃，建议使用<code>select</code>或者<code>poll</code></li><li>当监测的<code>fd</code>数目非常大，成千上万，且单位时间只有其中的一部分<code>fd</code>处于就绪状态，这个时候使用<code>epoll</code>能够明显提升性能（高并发，大规模连接数）</li></ul></li></ul><h4 id="触发模式" tabindex="-1"><a class="header-anchor" href="#触发模式" aria-hidden="true">#</a> 触发模式</h4><ol><li>**水平触发(LT)：**直到事件处理完成，会一直返回没有处理完的事件。可以保证事件的完整性、安全性，但如果用户态不处理，它也会一直返回（从内核态到用户态存在资源消耗） <ul><li><code>epoll_wait</code>检测到文件描述符有事件发生，则将其通知给应用程序，应用程序可以不立即处理该事件</li><li>当下一次调用<code>epoll_wait</code>时，<code>epoll_wait</code>还会再次向应用程序报告此事件，直至被处理</li></ul></li><li>**边缘触发(ET)：**每个事件只会返回一次，更有效率 <ul><li><code>epoll_wait</code>检测到文件描述符有事件发生，则将其通知给应用程序，应用程序必须立即处理该事件</li><li>必须要一次性将数据读取完，使用非阻塞I/O，读取到出现<code>EAGAIN</code>状态（数据读取完毕或无更多数据可读）</li></ul></li></ol><p>两种触发模式【<u>读取数据</u>】的差别：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//LT水平触发</span>
<span class="token keyword">bool</span> http_conn<span class="token double-colon punctuation">::</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf<span class="token operator">+</span>m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE<span class="token operator">-</span>m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//ET边缘触发 要一次性将数据读取完直到出现EAGAIN或EWOULDBLOCK</span>
<span class="token keyword">bool</span> http_conn<span class="token double-colon punctuation">::</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>   
          <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token comment">//表示没有数据可接收 退出循环不再读取</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token comment">//表示对方关闭了连接 </span>
    <span class="token punctuation">}</span>
    m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http处理" tabindex="-1"><a class="header-anchor" href="#http处理" aria-hidden="true">#</a> http处理</h3><p>http处理连接请求的流程是：</p><ol><li><p>浏览器端发出http连接请求，主线程创建**<u>http对象</u>**接收请求并将所有数据读入对应<code>buffer</code>，将该对象插入任务队列，工作线程从任务队列中取出一个任务进行处理；</p></li><li><p>工作线程取出任务后，调用<code>process_read</code>函数，通过<mark>主、从状态机</mark>对请求报文进行解析；</p></li><li><p>解析完之后，跳转<code>do_request</code>函数生成响应报文，通过<code>process_write</code>写入<code>buffer</code>，返回给浏览器端。</p></li></ol><h4 id="接收http请求" tabindex="-1"><a class="header-anchor" href="#接收http请求" aria-hidden="true">#</a> 接收http请求</h4><p>浏览器端发出http连接请求，服务器端主线程创建http对象接收请求并将所有数据读入对应buffer，将该对象插入任务队列。</p><p>两种触发模式【<u>处理http连接</u>】的差别：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>   <span class="token comment">//套接字地址: IP地址和端口号</span>
socklen_t client_addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//地址长度</span>

<span class="token comment">//LT水平触发</span>
<span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listendfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token comment">//连接错误 处理下一个事件</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token double-colon punctuation">::</span>m_user_count <span class="token operator">&gt;=</span> MAX_FD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">&quot;Internal server busy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
users<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将连接注册到内核事件表</span>

<span class="token comment">//ET边缘触发</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listendfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token comment">//连接错误</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token double-colon punctuation">::</span>m_user_count <span class="token operator">&gt;=</span> MAX_FD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">&quot;Internal server busy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  users<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将连接注册到内核事件表</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="http报文解析" tabindex="-1"><a class="header-anchor" href="#http报文解析" aria-hidden="true">#</a> http报文解析</h4><h2 id="sql连接池" tabindex="-1"><a class="header-anchor" href="#sql连接池" aria-hidden="true">#</a> SQL连接池</h2><blockquote><p>什么是数据库连接池？</p></blockquote><p>**<u>池</u>**是一组资源的集合，这组资源在服务器启动之初就被完全创建好并初始化。通俗来说，池是资源的容器，本质上是对资源的复用。</p><p>顾名思义，连接池中的资源为一组<u>数据库连接</u>，由程序动态地对池中的连接进行使用，释放。</p><p>当系统开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配；当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。</p><blockquote><p>为什么要创建连接池？</p></blockquote><p>从一般流程中可以看出，若系统需要频繁访问数据库，则需要频繁创建和断开数据库连接，而创建数据库连接是一个很耗时的操作，也容易对数据库造成安全隐患。在程序初始化的时候，集中创建多个数据库连接，并把他们集中管理，供程序使用，可以保证较快的数据库读写速度，更加安全可靠。</p><p>池可以看做资源的容器，所以多种实现方法，比如<strong>数组、链表、队列</strong>等。这里，使用<mark>单例模式和链表</mark>创建数据库连接池，实现对数据库连接资源的复用。</p><p>项目中的数据库模块分为两部分，其一是数据库连接池的定义，其二是利用连接池完成登录和注册的校验功能。具体的，工作线程从数据库连接池取得一个连接，访问数据库中的数据，访问完毕后将连接交还连接池。</p><h3 id="单例模式创建" tabindex="-1"><a class="header-anchor" href="#单例模式创建" aria-hidden="true">#</a> 单例模式创建</h3><p>**单例模式：**保证类的实例化对象仅有一个，并且提供一个访问他的全局访问点</p><p>单例模式可以通过<u>全局或者静态变量</u>的形式实现，好处是简单，缺点是影响封装性，难以保证别的代码不会对全局变量造成影响。使用类的静态成员变量实现单例模式的时候，注意：</p><ul><li>默认的构造函数、拷贝构造函数、赋值构造函数声明为私有的，使其不能直接实例化（禁止在类的外部创建该对象）</li><li>全局访问点也要定义成<u>静态类型的成员函数</u>，没有参数，返回该类的指针类型。因为使用<strong>实例化对象的时候是通过类直接调用该函数</strong>，并不是先创建一个该类的对象，通过对象调用</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">connection_pool</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">//静态成员函数 返回指向该类的指针</span>
  <span class="token keyword">static</span> connection_pool <span class="token operator">*</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">//构造函数和析构函数创建为私有 因而不能直接实例化对象</span>
  <span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">~</span><span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

connection_pool<span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//局部静态变量</span>
  <span class="token keyword">static</span> connection_pool <span class="token operator">=</span> connPool<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>connPool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//初始化数据库连接池</span>
m_connPool <span class="token operator">=</span> connection_pool<span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结单例模式的关键：</p><ol><li><mark>构造函数、析构函数设置为私有</mark>，意味着只有类内部的代码可以创建和销毁该类的对象</li></ol><ul><li>类内部的代码，即类提供一个<strong>公有的静态成员函数</strong>，来完成对于该类对象的创建和销毁（类内部创建） <ul><li>为什么需要<u>静态成员函数</u>？因为可以通过类直接访问（而不需要创建对象）且共有保证外部访问</li></ul></li><li>什么时候构造函数、析构函数被调用？ <ul><li><strong>第一次</strong>调用公共静态成员函数<code>GetInstance()</code>时，会创建一个<code>connection_pool</code>类的实例此时调用构造函数</li><li>程序结束时，调用析构函数</li></ul></li></ul><ol start="2"><li>类内部的代码，即公有的静态成员函数在创建该类实例时，将该实例<mark>设置成局部静态变量</mark>【关键】</li></ol><ul><li>局部静态变量的生命周期是<strong>从第一次使用到程序结束</strong>，意味着 <code>connPool</code> 变量将在程序运行期间一直存在 <ul><li>如果<code>GetInstance()</code>被调用多次，将始终返回相同的实例，因为在局部静态变量的生命周期内，实例只会被创建一次</li></ul></li><li><strong>保证单例模式的唯一性</strong>，静态局部变量只会在其第一次使用时进行初始化，之后它的值将一直保持不变</li></ul><h3 id="连接池功能" tabindex="-1"><a class="header-anchor" href="#连接池功能" aria-hidden="true">#</a> 连接池功能</h3><p>数据库连接池的功能包括：初始化，获取连接，释放连接，销毁连接池。</p><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h4><p>要点：使用<mark>信号量</mark>实现多线程争夺连接的同步机制，这里将信号量<strong>初始化为数据库的连接总数</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h&gt;</span></span>

connection_pool<span class="token double-colon punctuation">::</span><span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  m_CurConn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//当前已使用的连接数</span>
  m_FreeConn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//当前空闲的连接数</span>
<span class="token punctuation">}</span>

<span class="token class-name">connection_pool</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">DestroyPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//RAII机制完成自动释放</span>
<span class="token punctuation">}</span>

<span class="token comment">//初始化</span>
connection_pool<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>MaxConn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MYSQL <span class="token operator">*</span>con <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    con <span class="token operator">=</span> <span class="token function">mysql_init</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//初始化连接</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment">//连接失败</span>
    con <span class="token operator">=</span> <span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//与mysql服务器建立连接</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment">//连接失败</span>
    conn_List<span class="token punctuation">.</span><span class="token function">pushback</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  reserve <span class="token operator">=</span> <span class="token function">sem</span><span class="token punctuation">(</span>MaxConn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取、释放连接" tabindex="-1"><a class="header-anchor" href="#获取、释放连接" aria-hidden="true">#</a> 获取、释放连接</h4><p>要点：</p><ul><li>当线程数量大于数据库连接数量时，<mark>使用信号量进行同步</mark>，每次取出连接，信号量原子<code>-1</code>，释放连接原子<code>+1</code>，若连接池内没有空闲连接（信号量小于0）则阻塞等待；</li><li>多线程操作数据库连接池会产生竞争，使用互斥锁来保证同一时刻只有一个线程操作。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//获取连接</span>
MYSQL <span class="token operator">*</span>connection_pool<span class="token double-colon punctuation">::</span><span class="token function">GetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>connList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  reserve<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//信号量-1 若有空闲连接就会运行到下一行 否则阻塞</span>
  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  MYSQL <span class="token operator">*</span>con <span class="token operator">=</span> conn_List<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  conn_List<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> con<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//释放连接</span>
<span class="token keyword">bool</span> connection_pool<span class="token double-colon punctuation">::</span><span class="token function">ReleaseConnection</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>con<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  conn_List<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  reserve<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//信号量+1 若信号量小于等于0 会自动唤醒一个wait的线程</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="销毁连接池" tabindex="-1"><a class="header-anchor" href="#销毁连接池" aria-hidden="true">#</a> 销毁连接池</h4><p>要点：通过迭代器遍历连接池链表，关闭对应数据库连接，清空链表并重置空闲连接和现有连接数量。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>connection_pool<span class="token double-colon punctuation">::</span><span class="token function">DestroyPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>conn_List<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token operator">&lt;</span>MYSQL <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> conn_List<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it<span class="token operator">!=</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      MYSQL <span class="token operator">*</span>con <span class="token operator">=</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>
      <span class="token function">mysql_close</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//关闭与数据库的连接</span>
    <span class="token punctuation">}</span>
    m_CurConn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		m_FreeConn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		connList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="raii机制" tabindex="-1"><a class="header-anchor" href="#raii机制" aria-hidden="true">#</a> RAII机制</h3><p>上述<code>connection_pool</code>类已经实现调用析构函数（程序结束时）自动销毁连接池，但连接的获取和释放没有实现自动化。利用RAII机制：创建对象时申请资源，销毁对象时释放资源，来实现MYSQL连接的自动获取和释放。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">connectionRAII</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">//使用双指针 即储存和传递指向MYSQL的指针的指针 可以实现在函数中传递MYSQL *指针</span>
  <span class="token function">connectionRAII</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span><span class="token operator">*</span>SQL<span class="token punctuation">,</span> connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">~</span><span class="token function">connectionRAII</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  MYSQL <span class="token operator">*</span>conRAII<span class="token punctuation">;</span>
  connection_pool <span class="token operator">*</span>poolRAII<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

connectionRAII<span class="token double-colon punctuation">::</span><span class="token function">connectionRAII</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span><span class="token operator">*</span>SQL<span class="token punctuation">,</span> connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//SQL是指向指针的指针 因此*SQL是指向MYSQL的指针</span>
  <span class="token operator">*</span>SQL <span class="token operator">=</span> connPool<span class="token operator">-&gt;</span><span class="token function">GetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  conRAII <span class="token operator">=</span> <span class="token operator">*</span>SQL<span class="token punctuation">;</span>
  poolRAII <span class="token operator">=</span> connPool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">connectionRAII</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">connectionRAII</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  poolRAII<span class="token operator">-&gt;</span><span class="token function">ReleaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个<code>connectionRAII</code>类的对象即获得一个MYSQL连接，该对象被销毁时，MYSQL连接也会自动释放。</p>`,90),l=[c];function i(u,d){return s(),a("div",null,l)}const v=n(t,[["render",i],["__file","webserver.html.vue"]]);export{v as default};
