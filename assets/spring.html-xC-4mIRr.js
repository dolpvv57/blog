const e=JSON.parse(`{"key":"v-ec67e482","path":"/posts/Spring/spring.html","title":"Spring框架理解","lang":"zh-CN","frontmatter":{"description":"Spring框架理解 img Core Container Spring 的核心容器是其他模块建立的基础，具体介绍： Beans 模块：提供了框架的基础部分，包括控制反转和依赖注入 Core 核心模块：封装了 Spring 框架的底层部分，包括资源访问、类型转换及一些常用工具类 Context 上下文模块：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。其中，ApplicationContext 接口是上下文模块的焦点 SpEL 模块：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/Spring/spring.html"}],["meta",{"property":"og:site_name","content":"Becky's"}],["meta",{"property":"og:title","content":"Spring框架理解"}],["meta",{"property":"og:description","content":"Spring框架理解 img Core Container Spring 的核心容器是其他模块建立的基础，具体介绍： Beans 模块：提供了框架的基础部分，包括控制反转和依赖注入 Core 核心模块：封装了 Spring 框架的底层部分，包括资源访问、类型转换及一些常用工具类 Context 上下文模块：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。其中，ApplicationContext 接口是上下文模块的焦点 SpEL 模块：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Becky"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring框架理解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Becky\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Spring设计模式","slug":"spring设计模式","link":"#spring设计模式","children":[]}],"git":{},"readingTime":{"minutes":5.23,"words":1570},"filePathRelative":"posts/Spring/spring.md","excerpt":"<h1> Spring框架理解</h1>\\n<figure><img src=\\"/assets/study/Spring/6.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<ol>\\n<li><strong>Core Container</strong></li>\\n</ol>\\n<p>Spring 的核心容器是其他模块建立的基础，具体介绍：</p>\\n<ul>\\n<li><span style=\\"color:rgb(230,73,25)\\">Beans 模块</span>：提供了框架的基础部分，包括控制反转和依赖注入</li>\\n<li><span style=\\"color:rgb(230,73,25)\\">Core 核心模块</span>：封装了 Spring 框架的底层部分，包括资源访问、类型转换及一些常用工具类</li>\\n<li><span style=\\"color:rgb(230,73,25)\\">Context 上下文模块</span>：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。其中，ApplicationContext 接口是上下文模块的焦点</li>\\n<li><span style=\\"color:rgb(230,73,25)\\">SpEL 模块</span>：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等</li>\\n</ul>","autoDesc":true}`);export{e as data};
